@page
@using LPGxWebApp.GlobalData;
@using LPGxWebApp.Response;
@model LPGxWebApp.Pages.EditUserModel
@{
    ViewData["Title"] = "Edit User";
    ViewData["ActiveMenu"] = "UserList";  // Set active menu here
    ViewData["OpenMenu"] = "Users";  // Set open menu (for example, if the Setup menu should be expanded)
}
@{
    // Retrieve the message and message type directly, if necessary
    var message = TempData["Message"] as string;
    var messageType = TempData["MessageType"] as string;

    // Retrieve the current time
    var currentTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm");

    // Retrieve VerifyLoginData from session and check for null
    var verifyLoginData = HttpContext.Session.GetObject<VerifyLoginData>("VerifyLoginData");

    // Redirect to Login if VerifyLoginData is null
    if (verifyLoginData == null)
    {
        RedirectToPage("/Login/Index");
        return; // Ensure no further code is executed after redirect
    }

    // Use the signon name from the verified login data
    var usercode = verifyLoginData.UserCode;
    var username = verifyLoginData.UserName;
    var userlevel = verifyLoginData.UserLevel;
    var branchcode = verifyLoginData.BranchCode;
}

<!doctype html>

<html lang="en"
      class="light-style layout-menu-fixed layout-compact"
      dir="ltr"
      data-theme="theme-default"
      data-assets-path="~/assets/"
      data-template="vertical-menu-template-free"
      data-style="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />

    <title>@ViewData["Title"]</title>

    <meta name="description" content="" />

    <!-- Favicon -->
    <link rel="icon" href="~/images/logo.png" type="image/png">

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&ampdisplay=swap"
          rel="stylesheet" />

    <link rel="stylesheet" href="~/assets/vendor/fonts/remixicon/remixicon.css" />

    <!-- Menu waves for no-customizer fix -->
    <link rel="stylesheet" href="~/assets/vendor/libs/node-waves/node-waves.css" />

    <!-- Core CSS -->
    <link rel="stylesheet" href="~/assets/vendor/css/core.css" class="template-customizer-core-css" />
    <link rel="stylesheet" href="~/assets/vendor/css/theme-default.css" class="template-customizer-theme-css" />
    <link rel="stylesheet" href="~/assets/css/demo.css" />

    <!-- Vendors CSS -->
    <link rel="stylesheet" href="~/assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.css" />

    <!-- Page CSS -->
    <!-- Helpers -->
    <script src="~/assets/vendor/js/helpers.js"></script>
    <!--! Template customizer & Theme config files MUST be included after core stylesheets and helpers.js in the <head> section -->
    <!--? Config:  Mandatory theme config file contain global vars & default theme options, Set your preferred theme option in this file.  -->
    <script src="~/assets/js/config.js"></script>

    <!-- Toastr CSS in <head> -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet" />

</head>

<body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Set Temp data -->
            @{
                TempData["username"] = username;
                TempData["userlevel"] = userlevel;
                TempData["branchcode"] = branchcode;

                if (userlevel == 1)
                    TempData["levelname"] = "Super Admin";
                else if (userlevel == 2)
                    TempData["levelname"] = "Admin";
                else if (userlevel == 3)
                    TempData["levelname"] = "Salesman";
                else if (userlevel == 4)
                    TempData["levelname"] = "Management";
            }
            <!-- Menu -->
            @{
                await Html.RenderPartialAsync("Shared/_MenuPartial");
            }
            <!-- / Menu -->
            <!-- Layout container -->
            <div class="layout-page">
                <!-- Navbar -->
                @{
                    await Html.RenderPartialAsync("Shared/_NavBarPartial");
                }
                <!-- / Navbar -->
                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <!-- Content -->

                    <div class="container-xxl flex-grow-1 container-p-y py-5">
                        <div class="row gy-6">
                            <div class="card shadow-sm p-4">
                                <h5>@ViewData["Title"] Form</h5>
                                <div>
                                    <form id="userCreateForm" action="~/Users/EditUser" method="POST">
                                        <div class="row g-3">
                                            <!-- User Code (hidden) -->
                                            <div class="col-md-4" style="display: none;">
                                                <div class="mb-3">
                                                    <label for="usercode" class="form-label">User Code</label>
                                                    <input type="number" class="form-control" id="usercode" name="usercode" readonly />
                                                </div>
                                            </div>

                                            <!-- User Name (username) -->
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label for="username" class="form-label">User Name</label>
                                                    <input type="text" class="form-control" id="username" name="username" required />
                                                    <div class="invalid-feedback">User name is required.</div>
                                                </div>
                                            </div>

                                            <!-- User Contact (signonid) -->
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label for="signonid" class="form-label">User Contact</label>

                                                    <div class="d-flex">
                                                        <!-- Country Code Dropdown -->
                                                        <div class="flex-shrink-0" style="width: 30%;">
                                                            <!-- Reduced width for the country code -->
                                                            <select id="CountryCode" name="CountryCode" class="form-control" required readonly>
                                                                <option value="88">+88 (Bangladesh)</option>
                                                                <option value="91">+91 (India)</option>
                                                                <option value="92">+92 (Pakistan)</option>
                                                                <option value="94">+94 (Sri Lanka)</option>
                                                                <option value="1">+1  (USA/Canada)</option>
                                                                <!-- Add more country codes as needed -->
                                                            </select>
                                                        </div>

                                                        <!-- Phone Number Input -->
                                                        <div class="flex-grow-1 ms-2">
                                                            <!-- flex-grow-1 ensures it takes the remaining space, ms-2 for small margin -->
                                                            <input type="text" id="PhoneNumber" name="PhoneNumber" class="form-control" placeholder="Enter phone number" maxlength="15" readonly />
                                                        </div>

                                                        <!-- Hidden Field for Combined Contact -->
                                                        <input type="text" class="form-control" id="signonid" name="signonid" required hidden />
                                                    </div>

                                                    <div class="invalid-feedback">User contact is required.</div>
                                                </div>
                                            </div>

                                            <!-- EMAIL/SMS (authenticatorid) -->
                                            <div class="col-md-4" style="display: none;">
                                                <div class="mb-3">
                                                    <label for="authenticatorid" class="form-label">EMAIL/SMS</label>
                                                    <select class="form-control" id="authenticatorid" name="authenticatorid" readonly>
                                                        <option value="1" selected>EMAIL</option>
                                                        <option value="2">SMS</option>
                                                    </select>
                                                </div>
                                            </div>

                                            <!-- Email (emailid) -->
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label for="emailid" class="form-label">Email</label>
                                                    <input type="text" class="form-control" id="emailid" name="emailid" placeholder="Enter user's email address" required />
                                                    <div class="invalid-feedback">Email address is required.</div>
                                                </div>
                                            </div>

                                            <!-- 2FA Enable (twofa) -->
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label for="twofa" class="form-label">OTP</label>
                                                    <!-- Switch with Enable/Disable text -->
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" id="twofa" name="twofa" onchange="toggleText()">
                                                        <label class="form-check-label" for="twofa" id="twofa-label">Enable OTP Code</label>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- User Level (userlevel) dropdown -->
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label for="levelcode" class="form-label">User Level</label>
                                                    <select class="form-control" id="levelcode" name="levelcode" required>
                                                        <option value="" disabled selected>Select User Level</option>
                                                        @if (Model.LevelList != null && Model.LevelList.Any())
                                                        {
                                                            @foreach (var apt in Model.LevelList.Where(a => a.USERLEVEL != 1))
                                                            {
                                                                <!-- Use USERLEVEL as the value and show LEVELNAME in the dropdown -->
                                                                <option value="@apt.USERLEVEL">@apt.LEVELNAME</option>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <option value="" disabled>No user level available</option>
                                                        }
                                                    </select>
                                                    <input type="text" class="form-control" id="userlevel" name="userlevel" required hidden />
                                                    <div class="invalid-feedback">User Level is required.</div>
                                                </div>
                                            </div>


                                            <!-- Password (password with eye sign) -->
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <div class="form-password-toggle">
                                                        <label class="form-label" for="password">Password</label>
                                                        <div class="input-group">
                                                            <input type="password"
                                                                   class="form-control"
                                                                   id="password" name="password"
                                                                   placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;"
                                                                   aria-describedby="password" />
                                                            <span class="input-group-text cursor-pointer"><i class="ri-eye-off-line ri-20px" style="color: var(--bs-primary);"></i></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- entryuser (hidden) -->
                                            <div class="col-md-4" style="display: none;">
                                                <div class="mb-3">
                                                    <label for="entryuser" class="form-label">Entry User ID</label>
                                                    <input type="number" class="form-control" id="entryuser" name="entryuser" value="@usercode" required />
                                                    <div class="invalid-feedback">Entry user ID is required.</div>
                                                </div>
                                            </div>

                                            <!-- createdate (hidden) -->
                                            <div class="col-md-4" style="display: none;">
                                                <div class="mb-3">
                                                    <label for="createdate" class="form-label">Create Date</label>
                                                    <input type="datetime-local" class="form-control" id="createdate" name="createdate" value="@currentTime" required />
                                                    <div class="invalid-feedback">Creation date is required.</div>
                                                </div>
                                            </div>

                                            <!-- enableyn (default to "Y") (hidden) -->
                                            <div class="col-md-4" style="display: none;">
                                                <div class="mb-3">
                                                    <label for="enableyn" class="form-label">Enabled</label>
                                                    <select class="form-control" id="enableyn" name="enableyn" required>
                                                        <option value="Y" selected>Yes</option>
                                                    </select>
                                                </div>
                                            </div>

                                        </div>

                                        <!-- Submit Button -->
                                        <button type="submit" class="btn btn-primary">
                                            <i class="ri-check-double-line"></i> Update
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Footer -->
                    @{
                        await Html.RenderPartialAsync("Shared/_FooterPartial");
                    }
                    <!-- / Footer -->

                    <div class="content-backdrop fade"></div>
                </div>
                <!-- Content wrapper -->
            </div>
            <!-- / Layout page -->
        </div>

        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>
    </div>
    <!-- / Layout wrapper -->
    <!-- Core JS -->
    <!-- build:js assets/vendor/js/core.js -->
    <script src="~/assets/vendor/libs/jquery/jquery.js"></script>
    <script src="~/assets/vendor/libs/popper/popper.js"></script>
    <script src="~/assets/vendor/js/bootstrap.js"></script>
    <script src="~/assets/vendor/libs/node-waves/node-waves.js"></script>
    <script src="~/assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.js"></script>
    <script src="~/assets/vendor/js/menu.js"></script>

    <!-- endbuild -->
    <!-- Vendors JS -->
    <!-- Main JS -->
    <script src="~/assets/js/main.js"></script>

    <!-- Bootstrap 5 and Popper.js JS -->
    <script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>

    <!-- Include Toastr JS at the end of your page, just before the closing </body> tag -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

    <!-- Now you can configure Toastr and use it -->
    @if (!string.IsNullOrEmpty(message))
    {
        <script type="text/javascript">
            if (typeof toastr !== 'undefined') {
            @if (messageType == "Success")
            {
                <text>toastr.success('@message'); </text>
            }
            else if (messageType == "Error")
            {
                <text>toastr.error('@message'); </text>
            }
            else if (messageType == "Info")
            {
                <text>toastr.info('@message'); </text>
            }
            else if (messageType == "Warning")
            {
                <text>toastr.warning('@message'); </text>
            }
            else
            {
                <text>toastr.info('@message'); </text>  <!-- Default to Info -->
            }
                                                                                                                                                                                            }
            else {
                console.error('Toastr library is not loaded!');
            }
        </script>
    }

    <!-- JavaScript to combine country code and phone number -->
    <script>
        document.getElementById("CountryCode").addEventListener("change", updateVisitorContact);
        document.getElementById("PhoneNumber").addEventListener("input", updateVisitorContact);

        function updateVisitorContact() {
            // Get the selected country code and phone number
            var countryCode = document.getElementById("CountryCode").value;
            var phoneNumber = document.getElementById("PhoneNumber").value;

            // Combine the country code and phone number
            var fullContact = countryCode + phoneNumber;

            // Set the value of the hidden input
            document.getElementById("signonid").value = fullContact;
        }
    </script>

    <!-- Optional CSS to style valid and invalid inputs -->
    <style>
        .is-valid {
            border-color: #28a745;
        }

        .is-invalid {
            border-color: #dc3545;
        }

            .is-invalid ~ .invalid-feedback {
                display: block;
            }
    </style>

    <!-- JavaScript to toggle between Enable and Disable text -->
    <script>
        function toggleText() {
            var switchLabel = document.getElementById('twofa-label');
            var switchInput = document.getElementById('twofa');

            if (switchInput.checked) {
                switchLabel.textContent = 'Disable OTP Code';  // Change text to Disable
            } else {
                switchLabel.textContent = 'Enable OTP Code';  // Change text to Enable
            }
        }
    </script>

    <!-- JavaScript to dynamically update the Level Code (USERLEVEL) based on selected LEVELNAME -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Attach event listener to the Level Number (LEVELCODE) dropdown
            document.getElementById('levelcode').addEventListener('change', function () {
                var levelcode = this.value.trim();  // Get the selected LEVELCODE value and trim any whitespace

                console.log("Selected LEVELCODE:", levelcode);  // Debugging: Check the selected value

                // List of Level Numbers and corresponding Level Codes (from the server)
                var levelList = @Html.Raw(Json.Serialize(Model.LevelList));

                console.log("Level List:", levelList);  // Debugging: Check the full list of Levels

                // Ensure both values are treated as strings (or numbers) and compare
                var selectedLevel = levelList.find(function (apt) {
                    // Ensure that we're comparing strings or numbers explicitly
                    if (apt.userlevel && typeof apt.userlevel === 'number' && typeof levelcode === 'string') {
                        return apt.userlevel.toString().trim() === levelcode;  // Cast both to string for comparison
                    } else if (apt.userlevel && typeof apt.userlevel === 'string' && typeof levelcode === 'string') {
                        return apt.userlevel.trim() === levelcode;  // If both are strings, compare directly
                    } else {
                        console.log("Invalid comparison between levelcode and userlevel:", apt);  // Debugging: Log any invalid Levels
                        return false;
                    }
                });

                // If Level is found, update the Level Code (userlevel) input field
                if (selectedLevel) {
                    console.log("Found Level:", selectedLevel);  // Debugging: Check the selected Level data
                    document.getElementById('userlevel').value = selectedLevel.userlevel; // Set userlevel in the input field
                } else {
                    console.log("No matching Level found!");  // Debugging: If no match is found
                }
            });
        });
    </script>

    <script>
        function editUser(userCode) {
            // Redirect to the Edit page with the userCode as part of the URL
            window.location.href = `/Users/Edit/${userCode}`;
        }
    </script>

    <!-- Page JS -->
    <!-- Place this tag before closing body tag for github widget button. -->
    <script async defer src="https://buttons.github.io/buttons.js"></script>
</body>
</html>


